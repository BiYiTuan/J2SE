
线程池

线程池是Java5的新特征之一，有关Java5线程新特征的内容全部在java.util.concurrent下面。

线程池的基本思想是一种对象池的思想，开辟一块内存空间，里面存放了众多(未死亡)的线程，池中线程执
行调度由池管理器来处理。当有线程任务时，从池中取一个，执行完成后线程对象归池，这样可以避免反复
创建线程对象所带来的性能开销，节省系统资源。

线程池的作用:
线程池的作用就是限制系统中执行线程的数量。用线程池控制线程数量，其他线程排队等候。

为什么要用线程池:
1.减少创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。
2.可以根据系统的承受能力，调整线程池中工作线程的数目，防止因为消耗过多的内存，而把服务器累趴下
  (每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。

线程池的优点可总结为以下三点:
1.线程复用
2.控制最大并发数
3.管理线程

线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。
使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。
如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者"过度切换"的问题。

Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行
线程的工具。真正的线程池接口是ExecutorService。

线程池常用类:
Executor: 所有线程池的接口,只有一个方法execute。
ExecutorService: 增加Executor的行为，是Executor实现类的最直接接口。
Executors: 提供了一系列工厂方法用于创建线程池，返回的线程池都实现了 ExecutorService 接口。
ThreadPoolExecutor: 线程池的具体实现类，一般用的各种线程池都是基于这个类实现的。

----------------------------------------------------------------------------------------------------------
线程池包括四个基本组成部分:
1.线程池管理器(ThreadPool): 用于创建并管理线程池，包括创建线程池，销毁线程池，添加新任务;
2.工作线程(PoolWorker): 线程池中线程，在没有任务时处于等待状态，可以循环的执行任务;
3.任务接口(Task): 每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，
  任务执行完后的收尾工作，任务的执行状态等;
4.任务队列(taskQueue): 用于存放没有处理的任务, 提供一种缓冲机制。


线程池的工作过程:
1.线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。
2.当调用 execute() 方法添加一个任务时，线程池会做如下判断:
  1)如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务;
  2)如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列;
  3)如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务;
  4)如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常RejectExecutionException。
3.当一个线程完成任务时，它会从队列中取下一个任务来执行。
4.当一个线程无事可做，超过一定的时间(keepAliveTime)时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么
  这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。

----------------------------------------------------------------------------------------------------------

ThreadPoolExecutor的完整构造方法的签名是:

ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime,
	TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory,
	RejectedExecutionHandler handler).

corePoolSize     - 池中所保存的线程数，包括空闲线程。
maximumPoolSize  - 池中允许的最大线程数。
keepAliveTime    - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。
unit             - keepAliveTime 参数的时间单位。
workQueue        - 执行前用于保持任务的队列。此队列仅保持由 execute 方法提交的 Runnable 任务。
threadFactory    - 执行程序创建新线程时使用的工厂。
handler          - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。

ThreadPoolExecutor是Executors类的底层实现。

在JDK帮助文档中，有如此一段话:
"强烈建议程序员使用较为方便的Executors工厂方法Executors.newCachedThreadPool()(无界线程池，
可以进行自动线程回收)、Executors.newFixedThreadPool(int)(固定大小线程池)、
Executors.newSingleThreadExecutor()(单个后台线程)，它们均为大多数使用场景预定义了设置。"

Java通过Executors提供四种线程池，分别为:
1.newCachedThreadPool 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
2.newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
3.newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO、LIFO、优先级)执行。
4.newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。


