
枚举 enum

枚举类型 enum 是 JDK5.0 的新特征。Sun 引进了一个全新的关键字 enum 来定义一个枚举类。
enum 看起来很象是特殊的 class,它也可以有自己的变量，可以定义自己的方法，可以实现一个
或者多个接口。虽然语法上不像是在定义类，但枚举类型本质上就是一个类。所以编译完成后，会
产生一个.class文件。

enum类型有如下特征:   
1．它不能有public的构造函数，这样做可以保证客户代码没有办法新建一个enum的实例。

2．所有枚举值都是public,static,final的。注意这一点只是针对于枚举值，我们可以和在普通类
里面定义变量一样定义其它任何类型的非枚举变量，这些变量可以用任何你想用的修饰符。

3．Enum默认实现了java.lang.Comparable接口。 

4．Enum覆载了了toString方法，因此我们如果调用Color.BLUE.toString()默认返回字符串”BLUE”。

5．Enum提供了一个valueOf方法，这个方法和toString方法是相对应的。调用valueOf(“BLUE”)将
返回Color.BLUE.因此我们在自己重写toString方法的时候就要注意到这一点，一般来说应该相对应地
重写valueOf方法。   

6．Enum还提供了values方法，这个方法使你能够方便的遍历所有的枚举值。   

7．Enum还有一个oridinal的方法，这个方法返回枚举值在枚举类种的顺序，这个顺序根据枚举值声明的
顺序而定，这里Color.BLUE.ordinal()返回0。   


下面就是一个典型枚举类型的定义: 
public enum Color {
     BLUE,GREEN,RED
}

显然，enum 很像特殊的 class，实际上 enum 声明定义的类型就是一个类。
而这些类都是类库中 Enum 类的子类(java.lang.Enum<E>)。它们继承了这个 Enum 中的许多有用的方法。

1、Color 枚举类是特殊的 class，其枚举值(RED,BLUE...)是 Color 的类对象(类实例)： 
Color c=Color.RED; 
而且这些枚举值都是 public static final 的，也就是我们经常所定义的常量方式，因此枚举类中的枚举值
最好全部大写。 

2、即然枚举类是 class，当然在枚举类型中有构造器，方法和数据域。但是，枚举类的构造器有很大的不同： 
1)构造器只是在构造枚举值的时候被调用。 

enum   Color{ 
    RED(255,0,0),BLUE(0,0,255),BLACK(0,0,0),YELLOW(255,255,0),GREEN(0,255,0); 
    
    //构造枚举值
    private   Color(int   rv,int   gv,int   bv){
	this.redValue=rv;
	this.greenValue=gv;
	this.blueValue=bv;
    }
    
    //自定义的 public 方法
    public   String   toString(){	
        return   super.toString()+"("+redValue+","+greenValue+","+blueValue+")"; 
    }
}
 
2)构造器只能私有 private，绝对不允许有 public 构造器。这样可以保证外部代码无法新构造枚举类的实例。
这也是完全符合情理的，因为我们知道枚举值是 public static final 的常量而已。但枚举类的方法和数据域
可以允许外部访问。 

public   static   void   main(String   args[]){
    //Color  colors=new  Color(100,200,300);	//this is wrong！！！！
    Color  color=Color.RED;
    System.out.println(color);	//   调用了 toString()方法 
}


3、所有枚举类都继承了 Enum 的方法，下面我们详细介绍这些方法。 
1)ordinal()方法: 返回枚举值在枚举类中的顺序。这个顺序根据枚举值声明的顺序而定。
Color.RED.ordinal();	//返回结果：0
Color.BLUE.ordinal();	//返回结果：1

2)compareTo()方法: Enum 实现了 java.lang.Comparable 接口，因此可以比较对象与指定对象的顺序。
Enum 中的 compareTo 返回的是两个枚举值的顺序之差。当然，前提是两个枚举值必须属于同一个枚举类，
否则会抛出ClassCastException()异常。(具体可见源代码)
Color.RED.compareTo(Color.BLUE);	//返回结果  -1

3)values()方法：静态方法，返回一个包含全部枚举值的数组。
Color[] colors=Color.values();
for(Color c : colors){
   System.out.print(c+",");
}
//返回结果：RED,BLUE,BLACK YELLOW,GREEN,

4)toString()方法：返回枚举常量的名称。
Color c=Color.RED;
System.out.println(c);//返回结果: RED

5)valueOf()方法：这个方法和 toString 方法是相对应的，返回带指定名称的指定枚举类型的枚举常量。 
Color.valueOf("BLUE");	//返回结果:BLUE

6)equals()方法：比较两个枚举类对象的引用。

