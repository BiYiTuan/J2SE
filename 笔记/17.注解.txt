
注解(Annotation)

Java提供了一种原程序中的元素关联任何信息和任何元数据的途径和方法。

-----------------------------------------------------------------------------------------------------------

一.Java内置基本注解
Java中内置几种了基本的注解，几种常用的注解: 
1. @Deprecated: 用该注解注释的程序元素，表明不鼓励程序员使用这样的元素，通常是因为它很危险或有更好的选择。
2. @Override: 表明当前的方法定义将覆盖超类中的方法。
3. @SuppressWarnings: 表明关闭不当的编译器警告信息。
4. @Documented: 表明某一类型的注释将通过javadoc和类似的默认工具进行文档化。
5. @Inherited: 允许子类继承父类中的注解。
6. @Retention: 表明需要在什么级别保存该注解信息。
7. @Target: 表明该注解可以用于什么地方。
8. @Generated: 该注解用于标记已生成的源代码，它可以用于区分单个文件中用户编写的代码和生成的代码。
9. @PostConstruct: 该注解用于在依赖关系注入完成之后需要执行的方法上，以执行任何初始化。
10. @PreDestroy: 该注解作为回调通知用于各方法，以表示该实例正处于被容器移除的过程中。
11. @Resource: 该注解用于标记应用程序所需要的资源。


二.定义注解
注解的定义看起来很像接口的定义，具体代码如下: 

Java代码
import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUTIME)
public @interface Test {}

除了 @ 符号之外, @Test 的定义很像一个空的接口，定义一个注解的时候，要用到一些元注解(Java内置的注解)，
如上面例子中的定义， @Target 表明新定义的注解将用于方法定义上， @Retention 表明新定义的注解将在运行
时起作用。在注解中，一般都会包含一些元素以表示某些值，而没有元素的注解称为标记注解，如上面的 @Test 注解。


下面定义一个新的注解，将包含一些元素，如: 

Java代码
import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface UseCase{
　　public int id();
　　public String description() default "no description";
}

该注解中定义了两个元素 id 和 description，其中 description 元素通过 default 指定了默认值。


三.注解处理器(解析注解)
如果没有用来读取注解的工具，那注解也不会比注释更有用，使用注解的过程中，很重要的一部分就是创建
与使用注解处理器，而注解处理器的编写需要更加实际应用来灵活应用。


四.注意地方
1.注解元素可以用的类型只有: 所有基本类型(int,float,boolean)、String、Class、enum、Annotation，
以上类型的数组。

2.在定义元素的默认值时有限制，首先，元素不能有不确定的值，也就是说，元素必须要么具有默认值，要么
在使用注解时提供元素的值；其次，对于非基本类型的元素，不能以null作为其值。

3.注解不支持继承。


-----------------------------------------------------------------------------------------------

元注解
元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 
annotation类型作说明。

Java5.0定义的元注解:
1. @Target,
2. @Retention,
3. @Documented,
4. @Inherited


注解参数的可支持数据类型:
1.所有基本数据类型(int,float,boolean,byte,double,char,long,short)
2.String类型
3.Class类型
4.enum类型
5.Annotation类型
6.以上所有类型的数组


注解处理器
Java SE5 扩展了反射机制的API，以帮助程序员快速的构造自定义注解处理器。

注解处理器类库: java.lang.reflect.AnnotatedElement.

java.lang.reflect 包下主要包含一些实现反射功能的工具类。java.lang.reflect 包所有提供的反射API扩充了读
取运行时Annotation信息的能力。当一个Annotation类型被定义为运行时的Annotation后，该注解才能是运行时可见，
当class文件被装载时被保存在class文件中的Annotation才会被虚拟机读取。



注解继承只会继承类上的注解，不会继承方法上的注解，不会继承接口上的注解


注解的分类
1.按照运行机制分为
源码注解: 注解只在源码中存在，编译成.class文件就不存在了。
编译时注解: 注解在源码和.class文件中都存在(如: JDK内置系统注解)。
运行时注解: 在运行阶段还起作用，甚至会影响运行逻辑的注解(如: Spring中@Autowried)。

