
线程锁

同步锁(Lock)：Lock是控制多个线程对共享资源进行访问的工具。通常，锁提供了对共享资源的独占访问，
每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。不过某些锁支持共享
资源的并发访问，如：ReadWriteLock（读写锁）。在线程安全控制中，通常使用ReentrantLock（可重入锁）。
使用该Lock对象可以显式加锁、释放锁。

死锁：当2个线程相互等待对方是否同步监视器时就会发生死锁，JVM没有采取处理死锁的措施，这需要我们
自己处理或避免死锁。一旦死锁，整个程序既不会出现异常，也不会出现错误和提示，只是线程将处于阻塞
状态，无法继续。

1.synchronized

把代码块声明为 synchronized，有两个重要后果，通常是指该代码具有 原子性（atomicity）和 可见性（visibility）。

原子性:
意味这个时刻，只有一个线程能够执行一段代码，这段代码通过一个monitor object保护，从而防止多个线程在更新共享状态时相互冲突。

可见性:
它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的。

2.ReentrantLock(可重入锁)

3.ReadWriteLock(读写锁)
