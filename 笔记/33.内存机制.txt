
Java的内存机制？

Java把内存划分成两种: 一种是栈内存，另一种是堆内存。

栈(stack)是一种线形集合，其添加和删除元素的操作应在同一段完成。栈按照后进先出的方式进行处理。
堆(heap)是栈的一个组成元素。

栈(stack):
在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配。当在一段代码块定义一个变量时，
Java 就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java 会自动释放掉为该变量分配的内存空间，该
内存空间可以立即被另作它用。

堆(heap):
堆内存用来存放由 new 创建的对象和数组，在堆中分配的内存，由 Java 虚拟机的自动垃圾回收器来管理。在堆中
产生了一个数组或者对象之后，还可以在栈中定义一个特殊的变量，让栈中的这个变量的取值等于数组或对象在堆内存
中的首地址，栈中的这个变量就成了数组或对象的引用变量，以后就可以在程序中使用栈中的引用变量来访问堆中的数
组或者对象，引用变量就相当于是为数组或者对象起的一个名称。引用变量是普通的变量，定义时在栈中分配，引用变
量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，即使程序运行到使用 new 产生数组或者对象
的语句所在的代码块之外，数组和对象本身占据的内存不会被释放，数组和对象在没有引用变量指向它的时候，才变为
垃圾，不能再被使用，但仍然占据内存空间不放，在随后的一个不确定的时间被垃圾回收器收走(释放掉)。

这也是 Java 比较占内存的原因，实际上，栈中的变量指向堆内存中的变量，这就是 Java 中的指针！

变量在内存中的分配:
1.类变量(static修饰的变量): 堆。
2.实例变量: 堆。
3.局部变量: 栈。

栈是运行时的单位，而堆是存储的单位。

堆中存的是对象。栈中存的是基本数据类型和堆中对象的引用。一个对象的大小是不可估计的，或者说是可以动态变化的，
但是在栈中，一个对象只对应了一个4btye的引用(堆栈分离的好处)。

从以下几个方面进行JVM的调优: 
a.线程池: 解决用户响应时间长的问题;
b.连接池;
c.JVM启动参数: 调整各代的内存比例和垃圾回收算法，提高吞吐量;
d.程序算法: 改进程序逻辑算法提高性能。

--------------------------------------------------------------------------------------------------
堆溢出
在程序运行过程中，如果堆空间不足，则有可能抛出内存溢出错误(Out Of Memory)，简称为OOM。

例:

public class Heap{
    public static void main(String[] args){
        ArrayList list=new ArrayList();
        while(true){
            list.add(new Heap());
        }
    }
}

报错：
java.lang.OutOfMemoryError: Java heap space


栈溢出

例:
public class Stack{
    public static void main(String[] args){
        new Stack().test();
    }

    public void test(){
        test();
    }
}

报错：
java.lang.StackOverflowError



