

对象的序列化机制, 就是将对象编码成一个字节流(序列化)，以及从字节流编码中重新构建对象(反序列化)的过程。
将对象序列化后，一方面可以将其持久化到磁盘上，供以后反序列化使用; 另一方面在分布式环境中经常将对象从
这一端网络传递到另一端，需要一种在两端传输数据的协议，而序列化机制就提供了这种协议的实现。 

Java序列化对象的信息包括: 类元数据描述、类的属性、父类信息以及属性域的值。
Java将这些信息分成3部分: 序列化头信息、类的描述部分以及属性域的值部分。

序列化算法的基本步骤: 
1)输出序列化的头部信息，包括标识序列化协议的幻数以及协议的版本; 
2)按照由子类到父类的顺序，递归的输出类的描述信息，直到不再有父类为止; 类描述信息按照类元数据、类属性信
  息的顺序写入序列化流中; 
3)按照由父类到子类的顺序，递归的输出对象域的实际数据值; 而对象的属性信息是按照基本数据类型到对象类型的
  顺序写入序列化流中; 其中对象类型的属性会从 步骤1) 重新开始递归的输出，直到不再存在对象类型的属性。 


1.什么是Java对象序列化

Java平台允许我们在内存中创建可复用的Java对象，但一般情况下，只有当JVM处于运行时，这些对象才可能存在，
即，这些对象的生命周期不会比JVM的生命周期更长。但在现实应用中，就可能要求在JVM停止运行之后能够保存
(持久化)指定的对象，并在将来重新读取被保存的对象。Java对象序列化就能够帮助我们实现该功能。

使用Java对象序列化，在保存对象时，会把其状态保存为一组字节，在未来，再将这些字节组装成对象。必须注意
地是，对象序列化保存的是对象的"状态"，即它的成员变量。由此可知，对象序列化不会关注类中的静态变量。

除了在持久化对象时会用到对象序列化之外，当使用RMI(远程方法调用)，或在网络中传递对象时，都会用到对象序
列化。Java序列化API为处理对象序列化提供了一个标准机制。


2.
在Java中，只要一个类实现了java.io.Serializable接口，那么它就可以被序列化。

每个枚举类型都会默认继承类java.lang.Enum，而该类实现了Serializable接口，所以枚举类型对象都是默认可以
被序列化的。


3.transient关键字
当某个字段被声明为transient后，默认序列化机制就会忽略该字段。

--------------------------------------------------------------------------------------------------------
什么是序列化?
序列化就是将数据结构或对象转换成二进制串的过程，也就是编码的过程。

什么是反序列化?
将在序列化过程中所生成的二进制串转换成数据结构或者对象的过程。

为什么需要序列化?
转换为二进制串后才好进行网络传输嘛。

为什么需要反序列化?
将二进制转换为对象才好进行后续处理。

