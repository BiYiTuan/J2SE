

synchronized

synchronized 是JVM实现的一种锁, 用它来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线
程执行该段代码。

当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。
另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。

然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的
非synchronized(this)同步代码块。


Java中每一个对象都可以作为锁，这是synchronized实现同步的基础:
1.普通同步方法，锁是当前实例对象 
2.静态同步方法，锁是当前类的class对象 
3.同步方法块，锁是括号里面的对象

----------------------------------------------------------------------------------------------------------------
synchronized的实现原理:

synchronized是并发编程中保证线程安全的方式。synchronized的语义底层是通过一个monitor对象来完成的。每个对象都
有一个监视器锁(monitor)，当monitor被占用时就会处于锁定状态，线程通过执行monitorenter 和 monitorexit 指令来
获取和释放锁。该锁在实现上分为了偏向锁、轻量级锁和重量级锁，其中偏向锁在1.6是默认开启的，轻量级锁在多线程竞争
的情况下会膨胀成重量级锁，有关锁的数据都保存在对象头中。

线程执行monitorenter指令时尝试获取monitor的所有权，过程如下:
1.如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。
2.如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1。
3.如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。

执行monitorexit的线程必须是objectref所对应的monitor的所有者，指令执行时:
1.monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。
2.其他被这个monitor阻塞的线程可以尝试去获取这个monitor的所有权。 

扩展:
其实wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否
则会抛出java.lang.IllegalMonitorStateException异常的原因。




