

atomic

在多线程环境下，无锁的进行原子操作。

atomic包里的类都是使用Unsafe实现的包装类，核心操作是CAS原子操作。
java.util.concurrent.atomic包下的原子操作类都是基于CAS实现的。

CAS(compare and swap)，比较和替换技术，将预期值与当前变量的值比较(compare)，如果相等则使用新值替换(swap)当前
变量，否则不作操作。另外，需要注意的是CAS操作中的ABA问题，即将预期值与当前变量的值比较的时候，即使相等也不能保
证变量没有被修改过，因为变量可能由A变成B再变回A，解决该问题，可以给变量增加一个版本号，每次修改变量时版本号自增，
比较的时候，同时比较变量的值和版本号即可。

java.util.concurrent中提供了atomic原子包，可以实现原子操作(atomic operation)，即在多线程环境中，
执行的操作不会被其他线程打断。

Java 5 增加了 atomic wrapper classes，主要解决 i++ 非原子性操作的问题。
对它们的incr之类的操作就不需要sychronized。


atomic提供的四种原子更新方式:
1.原子方式更新基本类型;
2.原子方式更新数组;
3.原子方式更新引用;
4.原子方式更新字段。

更新基本类型:
AtomicBoolean，原子更新布尔类型。
AtomicInteger，原子更新整型。
AtomicLong，原子更新长整型。


更新数组:
AtomicIntegerArray，原子更新整型数组里的元素。
AtomicLongArray，原子更新长整型数组里的元素。
AtomicReferenceArray，原子更新引用类型数组里的元素。


更新引用:
AtomicReference，原子更新引用类型。
AtomicReferenceFieldUpdater，原子更新引用类型里的字段。
AtomicMarkableReference，原子更新带有标记位的引用类型。


更新字段:
AtomicIntegerFieldUpdater，原子更新整型字段的更新器。
AtomicLongFieldUpdater，原子更新长整型字段的更新器。
AtomicStampedReference，原子更新带有版本号的引用类型，用于解决使用CAS进行原子更新时，可能出现的ABA问题。


------------------------------------------------------------------------------------------------------

1.AtomicInteger
get()
set(int newValue)
getAndSet(int newValue)
compareAndSet(int expect, int update)
incrementAndGet()


2.AtomicLong


3.AtomicBoolean
compareAndSet(boolean expect, boolean update)
set(boolean newValue)
get()

------------------------------------------------------------------------------------------------------
1.Unsafe

Java无法直接访问底层操作系统，而是通过本地(native)方法来访问。不过尽管如此，JVM还是开了一个后门，JDK中
有一个类Unsafe，它提供了硬件级别的原子操作。

这个类尽管里面的方法都是public的，但是却没有办法使用它们，JDK API文档也没有提供任何关于这个类的方法的解
释。总而言之，对于Unsafe类的使用都是受限制的，只有授信的代码才能获得该类的实例，当然JDK库里面的类是可以
随意使用的。

Unsafe提供了硬件级别的操作，比如说获取某个属性在内存中的位置，比如说修改对象的字段值，即使它是私有的。


2.CAS

CAS，Compare and Swap，即比较并交换，设计并发算法时常用到的一种技术，java.util.concurrent包完全建立在
CAS之上，没有CAS也就没有此包，可见CAS的重要性。

当前的处理器基本都支持CAS，只不过不同的厂家的实现不一样罢了。CAS有三个操作数: 内存值V、旧的预期值A、要修
改的值B，当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做并返回false。

CAS也是通过Unsafe实现的，Unsafe下三个方法:
1.public final native boolean compareAndSwapObject(Object paramObject1, long paramLong, Object paramObject2, Object paramObject3);
2.public final native boolean compareAndSwapInt(Object paramObject, long paramLong, int paramInt1, int paramInt2);
3.public final native boolean compareAndSwapLong(Object paramObject, long paramLong1, long paramLong2, long paramLong3);

第一个参数是要修改的对象，
第二个参数是对象中要修改变量的偏移量，
第三个参数是修改之前的值，
第四个参数是预想修改后的值。


在CAS中，比较、交换是一组原子操作，不会被外部打断，先根据paramLong/paramLong1获取到内存当中当前的内存值V，
再将内存值V和原值A作比较，要是相等就修改为要修改的值B，由于CAS都是硬件级别的操作，因此效率会高一些。

注意:
CAS操作存在的"ABA"问题。如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就
能说明它的值没有被其他线程修改过了吗? 如果在这段期间它的值曾经被改成了B，然后又改回A，那CAS操作就会误认为
它从来没有被修改过。java.util.concurrent包为了解决这个问题，提供了一个带有标记的原子引用类"AtomicStampedReference"，
它可以通过控制变量值的版本来保证CAS的正确性。



http://www.cnblogs.com/xrq730/p/4976007.html



