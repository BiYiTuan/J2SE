
Java提供finalize()方法，垃圾回收器准备释放内存的时候，会先调用finalize()。

Java允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。

finalize方法是与Java编程中的垃圾回收器有关系。当一个对象变成一个垃圾对象的时候，如果此对象的内存被回收，
那么就可以调用系统中定义的finalize方法来完成。当垃圾回收器(garbage colector)决定回收某对象时，就会运行
该对象的finalize()方法。

finalize的工作原理:
一旦垃圾收集器准备好释放对象占用的存储空间，它首先调用finalize()，而且只有在下一次垃圾收集过程中，才会
真正回收对象的内存。所以如果使用finalize()，就可以在垃圾收集期间进行一些重要的清除或清扫工作。

finalize()在什么时候被调用? 有三种情况:
1.所有对象被Garbage Collection时自动调用, 比如运行System.gc()的时候。
2.程序退出时为每个对象调用一次finalize方法。
3.显式的调用finalize方法。

注意:
1.对象不一定会被回收。
2.垃圾回收不是析构函数。
3.垃圾回收只与内存有关。
4.垃圾回收和finalize()都是靠不住的，只要JVM还没有快到耗尽内存的地步，它是不会浪费时间进行垃圾回收的。

---------------------------------------------------------------------------------------------------------
finalize()实现原理:
新建一个对象时，在JVM中会判断该对象是否重写了finalize方法，如果类重写了finalize方法，且finalize方法体
不为空，则把该对象封装成Finalizer对象，并添加到Finalizer链表头。在Finalizer类的静态代码块中会创建一个
FinalizerThread类型的守护线程，负责从引用队列(ReferenceQueue)中获取Finalizer对象，如果队列中没有元素，
则通过wait方法将该线程挂起，等待被唤醒。如果返回了Finalizer对象，会执行对象的runFinalizer()方法，最终
会执行原始对象的finalize方法。



