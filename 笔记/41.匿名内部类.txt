

匿名内部类

匿名内部类就是没有名字的内部类，因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写。
使用匿名内部类有个前提条件: 必须继承一个父类或实现一个接口。

--------------------------------------------------------------------------------------------------
实例1:
abstract class Person {
    public abstract void eat();
}
 
class Child extends Person {
    public void eat() {
        System.out.println("eat something");
    }
}
 
public class Demo {
    public static void main(String[] args) {
        Person p = new Child();
        p.eat();
    }
}

分析:
我们用Child继承了Person类，然后实现了Child的一个实例，将其向上转型为Person类的引用。
但是，如果此处的Child类只使用一次，那么将其编写为独立的一个类岂不是很麻烦?
这个时候就引入了匿名内部类。

实例2:
abstract class Person {
    public abstract void eat();
}
 
public class Demo {
    public static void main(String[] args) {
        Person p = new Person() {
            public void eat() {
                System.out.println("eat something");
            }
        };

        p.eat();
    }
}

分析:
可以看到，我们直接将抽象类Person中的方法在大括号中实现了，这样可以省略一个类的书写，并且，
匿名内部类还能用于接口上。

实例3:
interface Person {
    public void eat();
}
 
public class Demo {
    public static void main(String[] args) {
        Person p = new Person() {
            public void eat() {
                System.out.println("eat something");
            }
        };

        p.eat();
    }
}

综上:
只要一个类是抽象的或是一个接口，其子类中的方法都可以使用匿名内部类来实现。



