import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;

/**
 * Java 备份和还原 MySQL 
 * 
 * 备份和导入是一个互逆的过程。
 * 备份：程序调用mysql的备份命令，读出控制台输入流信息，写入.sql文件；
 * 导入：程序调用mysql的导入命令，把从.sql文件中读出的信息写入控制台的输出流
 * 注意：此时定向符">"和"<"是不能用的
 */
public class MySqlOperator {

	public static void main(String[] args) {

		//backup();

		restore();
	}

	/**
	 * 备份
	 */
	public static void backup() {
		try {
			Runtime rt = Runtime.getRuntime();
			Process process = rt
					.exec("mysqldump -hlocalhost -uroot -p123 --set-charset=utf8 cms");
			InputStream in = process.getInputStream();
			InputStreamReader reader = new InputStreamReader(in, "utf8");
			String is, os;
			StringBuffer sb = new StringBuffer("");
			BufferedReader br = new BufferedReader(reader);
			while ((is = br.readLine()) != null) {
				sb.append(is + "\r\n");
			}
			os = sb.toString();
			FileOutputStream fos = new FileOutputStream("D:\\aaa.sql");
			OutputStreamWriter writer = new OutputStreamWriter(fos, "utf8");
			writer.write(os);

			writer.flush();
			in.close();
			reader.close();
			br.close();
			writer.close();
			fos.close();

			System.out.println("备份成功！");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 还原
	 */
	public static void restore() {
		try {
			Runtime rt = Runtime.getRuntime();
			Process process = rt.exec("mysql -hlocalhost -uroot -p123 cms");
			OutputStream out = process.getOutputStream();
			String is;
			StringBuffer sb = new StringBuffer("");
			String os;
			BufferedReader br = new BufferedReader(new InputStreamReader(
					new FileInputStream("D:\\aaa.sql"), "utf8"));
			while ((is = br.readLine()) != null) {
				sb.append(is + "\r\n");
			}
			os = sb.toString();

			OutputStreamWriter writer = new OutputStreamWriter(out, "utf8");
			writer.write(os);
			writer.flush();
			
			out.close();
			br.close();
			writer.close();

			System.out.println("还原成功！");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
