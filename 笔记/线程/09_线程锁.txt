
线程锁

同步锁(Lock): Lock是控制多个线程对共享资源进行访问的工具。通常，锁提供了对共享资源的独占访问，
每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。不过某些锁支持共享
资源的并发访问，如: ReadWriteLock(读写锁)。在线程安全控制中，通常使用ReentrantLock(可重入锁)。
使用该Lock对象可以显式加锁、释放锁。

死锁: 当2个线程相互等待对方是否同步监视器时就会发生死锁，JVM没有采取处理死锁的措施，这需要我们
自己处理或避免死锁。一旦死锁，整个程序既不会出现异常，也不会出现错误和提示，只是线程将处于阻塞
状态，无法继续。

java.util.concurrent.locks，有三个重要的接口:
1.Condition
Condition将Object监视器方法(wait、notify和 notifyAll)分解成截然不同的对象，以便通过将这些对
象与任意Lock实现组合使用，为每个对象提供多个等待 set(wait-set)。

2.Lock
Lock实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。

3.ReadWriteLock
ReadWriteLock维护了一对相关的锁定，一个用于只读操作，另一个用于写入操作。

---------------------------------------------------------------------------------------------------------

1.synchronized

把代码块声明为 synchronized，有两个重要后果，通常是指该代码具有 原子性(atomicity)和 可见性(visibility)。

原子性:
意味着同一时刻，只有一个线程能够执行一段代码，这段代码通过一个 monitor object 保护，从而防止多个线程在更
新共享状态时相互冲突。

可见性:
它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的。


2.ReentrantLock(可重入锁)
重入锁(ReentrantLock)是一种递归无阻塞的同步机制。它具有与使用 synchronized 方法和语句所访问的隐式监视器
锁定相同的一些基本行为和语义，但功能更强大。ReentrantLock 将由最近成功获得锁定，并且还没有释放该锁定的线
程所拥有。当锁定没有被另一个线程所拥有时，调用 lock 的线程将成功获取该锁定并返回。


lock.lock();

try {
    // do something ...
} finally {
    lock.unlock();
}


3.ReadWriteLock(读写锁)

使用Lock可以很优雅的控制竞争资源的安全访问，但是这种锁不区分读写。为了提高性能，Java提供了读写锁，在读的
地方使用读锁，在写的地方使用写锁，灵活控制，在一定程度上提高了程序的执行效率。

